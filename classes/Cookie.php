<?php

	/*
	 *	By Nick Swardh - nswardh.com
	 *
	 *	Free to use as long as this comment stay intact.
	*/
	
class Cookie {



	// Method for generating tokens. If no parameter is specified
	// a 64-char token will be generated by default.
	public static function Token($bytes = 32) {

		// Generate a 64 char token by default.
		return bin2hex(random_bytes($bytes));

	}



	// Method for baking cookies preveting XSFR attacks.
	public static function XSFR_Cookies($name) {

		// Generate a token.
		$token = self::Token();

		// Bake a session cookie...
		$_SESSION[$name] = $token;

		// ...and a regular cookie along with the SameSite attribute.
		return (setcookie($name, $token, time() + 1200, '/; HttpOnly; SameSite=strict')) ? true : false;

	}



	// Method for baking 'remember-me' cookies.
	public static function RememberMe($name, $value, $years = 2) {

		// Set the experation date to be $years years from now.
		$time = (365 * 24 * 60 * 60) * $years;
		return (setcookie($name, $value, time() + $time, '/; HttpOnly; SameSite=strict')) ? true : false;

	}



	// Method for cookie authenticatin.
	public static function Auth($name) {

		return (isset($_COOKIE[$name]) && $_SESSION[$name] === $_COOKIE[$name]) ? true : false;

	}



	// Method for checking if local cookie exist.
	public static function Exist($name) {
		return (isset($_COOKIE[$name])) ? true : false;
	}



	// Delete cookies specified by name.
	public static function Crush($name) {

		// Does the cookie exist?
		if (isset($_SESSION[$name]))
			unset($_SESSION[$name]);

		// Does the session cookie exist?
		if (isset($_COOKIE[$name])) {

			unset($_COOKIE[$name]);			// Clear cookie values.
			setcookie($name, '', time() -1, '/');	// Remove the cookie.

		}

	}



}
